buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"

group 'dev.rachamon'
version '0.0.1'

targetCompatibility = 1.8
sourceCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


repositories {
    flatDir { //Change this to where are your local libs
        dirs 'libs'
    }
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots'
    }
    maven { url = "https://jitpack.io" }

}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.19.2-R0.1-SNAPSHOT'

    compileOnly 'org.spongepowered:configurate-yaml:4.1.2'

    implementation project(':modules:api')

    implementation fileTree(dir: 'libs', include: ['*.jar']) // Include all .jar files in the 'libs' directory

    //Annotations
    compileOnly 'org.jetbrains:annotations:23.0.0'

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks.register('buildAndMoveJars') {
    doLast {
        // Define the projects to be built and moved
        def projects = [
                'modules/v1_16_5',
        ]

        // List to store the paths of the built JAR files
        def jarFiles = []

        projects.each { project ->

            // Execute the Gradle build for the project
            println("[PROJECT_COMPAT] Building project: ${project}")

            def jarName = "${project.substring(project.lastIndexOf('/') + 1)}-COMPAT.jar";
            def jarFile = file("$project/build/libs/${jarName}")

            if (jarFile.exists()) {
                println("[PROJECT_COMPAT] Moving jar '${jarName}' to 'libs' directory")

                def tempDir = file("libs")
                tempDir.mkdirs()
                def targetFile = file("$tempDir/${jarName}")
                jarFile.renameTo(targetFile)

                //Add to jarFiles list
                jarFiles.add(targetFile)
                // Print a success message if the build was successful
                println "[PROJECT_COMPAT] Build successful for project: $project"
                // remove the build directory
                jarFile.delete()
            } else {
                // Print an error message if the build failed
                println "[PROJECT_COMPAT] Build failed for project: $project"
            }
        }

    }
}

clean {
    doLast {
        fileTree(dir: 'libs', include: '**/*-COMPAT.jar').each { file ->
            file.delete()
        }
    }
}

shadowJar {
    archiveName = "${baseName}-${version}.${extension}"
}

jar {
    enabled = false //Disable default jar, only shadow jar will be created
    dependsOn(buildAndMoveJars)
    dependsOn(shadowJar { classifier = null })
}